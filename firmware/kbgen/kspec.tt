##
##                    The HumbleHacker Keyboard Project
##                 Copyright © 2008-2010, David Whetstone
##               david DOT whetstone AT humblehacker DOT com
##
##  This file is a part of The HumbleHacker Keyboard Project.
##
##  The HumbleHacker Keyboard Project is free software: you can redistribute
##  it and/or modify it under the terms of the GNU General Public License as
##  published by the Free Software Foundation, either version 3 of the
##  License, or (at your option) any later version.
##
##  The HumbleHacker Keyboard Project is distributed in the hope that it will
##  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
##  Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with The HumbleHacker Keyboard Project.  If not, see
##  <http://www.gnu.org/licenses/>.

grammar KSpec

  rule keyboard
    ws? 'Keyboard:' ident rev ws matrix keymaps:keymap+
    {
      def content
        kb = Keyboard.new()
        matrix.content(kb)
        keymaps.elements.each { |e| e.content(kb) }
        kb
      end
    }
  end

  rule rev
    sp 'rev:' ident
  end

  rule matrix
    'Matrix:' ident rev ws rows:matrix_row+
    {
      def content(kb)
        rows.elements.each {|e| e.content(kb) }
      end
    }
  end

  rule matrix_row
    'Row:' cols:(sp? location ',')+ sp? col:location ws
    {
      def content(kb)
        new_cols = Array.new
        cols.elements.each do |e|
          new_cols << e.location.text_value
          kb.reverseMatrix[e.text_value] = Cell.new(e.text_value[0,1], e.text_value[1,1])
        end
        new_cols << col.text_value
        kb.reverseMatrix[col.text_value] = Cell.new(col.text_value[0,1], col.text_value[1,1])
        kb.matrix.push new_cols
      end
    }
  end

  rule keymap
    'KeyMap:' ident base:(sp 'base:' ident)? default:(sp 'default')? rev ws keys:key+ ws?
    {
      def content(kb)

        kb.defaultMap = ident.text_value unless default.text_value.empty?

        if base.text_value.empty?
          map = KeyMap.new(ident.text_value, rev.text_value)
        elsif kb.maps.has_key? base.ident.text_value
          map = kb.maps[base.ident.text_value].dup
          map.add_map(ident.text_value, rev.text_value)
        else
          raise "Error: base map '#{base.ident.text_value}' has not been defined"
        end
        kb.maps[ident.text_value] = map
        keys.elements.each {|e| key = e.content; map.keys[key.location] = key}
      end
    }
  end

  rule ident
    [\-a-zA-Z0-9_]+
  end

  rule key
    'Key:' location ws kbinding:( map / macro / mode )+
    {
      def content
        key = Key.new(location.text_value)
        kbinding.elements.each {|e| e.fill_key(key)}
        key
      end
    }
  end

  rule location
    ([0-9] [A-Z]) / '--'
  end

  rule labels
    ((sp label)*)
  end

  rule map
    premods:modifiers? sp? 'Map:' usage mods:(sp? modifiers)? up:(sp 'page:' usage_page )? labels? ws
    {
      def the_premods
        premods.text_value.empty? ? 0 : premods.content
      end
      def fill_key(key)
        key.kbindings[the_premods] = content
      end
      def content
        the_mods   = mods.text_value.empty? ? 0 : mods.modifiers.content
        if !$hid.usagesByName.has_key? usage.text_value
          raise "Cannot find usage '#{usage.text_value}'"
        end
        the_usage  = $hid.usagesByName[usage.text_value]
        if !up.text_value.empty? && the_usage.page.name != up.usage_page.text_value
          raise "Usage page mismatch for usage '#{the_usage.name}'. Expected '#{the_usage.page.name}', received '#{up.usage_page.text_value}'"
        end
        Map.new(the_usage, the_mods)
      end
    }
  end

  rule mode
    premods:modifiers? sp? 'Mode:' mode:ident led:(sp 'led:' ident)? sp 'type:' type:ident labels? ws
    {
      def fill_key(key)
        the_premods = premods.text_value.empty? ? 0 : premods.modifiers.content
        the_mode = Mode.new(mode.text_value, type.text_value)
        the_mode.led = led.ident.text_value unless led.text_value.empty?
        key.kbindings[the_premods] = the_mode
      end
    }
  end

  rule macro
    premods:modifiers? sp? 'Macro:' labels? ws maps:map+
    {
      def fill_key(key)
        the_premods = premods.text_value.empty? ? 0 : premods.modifiers.content
        macro = Macro.new
        maps.elements.each {|map| macro.kbindings << map.content}
        key.kbindings[the_premods] = macro
      end
    }
  end

  rule usage
    (coded_char / [^ \t\n\r><])+
  end

  rule usage_page
    ident
  end

  rule modifiers
    '<' modifier_list '>'
    {
      def content
        mods = 0
        modifier_list.elements.each do |e|
          mods |= process_modifier(e.text_value.sub("|",""))
        end
        mods
      end
    }
  end

  rule label
    (( 't' / 'b' )? ( 'l' / 'c' / 'r' ) ':' string)
  end

  rule modifier_list
    (modifier '|')* modifier
  end

  rule modifier
    'shift'   / 'left_shift'   / 'right_shift'   /
    'control' / 'left_control' / 'right_control' /
    'alt'     / 'left_alt'     / 'right_alt'     /
    'gui'     / 'left_gui'     / 'right_gui'
  end

  rule ws
    ([ \t\n]+)
  end

  rule sp
    ([ \t]+)
  end

  rule literal_char
    !'"' .
  end

  rule coded_char
    '\\' ([n\\"<>])
  end

  rule string
    '"' (coded_char / literal_char)* '"'
  end

# rule string
#   '"' (!'"' . / '\"')* '"'
#  '"' ('\"' / [^"])* '"'
# end

end
